*  MCP written by GAMS Convert at 10/25/05 20:41:28
*  
*  Equation counts
*      Total        E        G        L        N        X        C
*         19        0       19        0        0        0        0
*  
*  Variable counts
*                   x        b        i      s1s      s2s       sc       si
*      Total     cont   binary  integer     sos1     sos2    scont     sint
*         19       19        0        0        0        0        0        0
*  FX      1        1        0        0        0        0        0        0
*  
*  Nonzero counts
*      Total    const       NL      DLL
*        138       95       43        0
*
*  Solve m using MCP;

*
* WARNING: bounds on matched variables CANNOT BE CHANGED
*

* Reformulation parameters, after checking for consistency.
* Reform Type        SINGLE      DOUBLE
*  RefType             mult        mult
*  Slack           positive    positive
*  Constraint      equality    equality
*  Aggregate           none        none
*  NCPBounds           none        none



Variables  x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19;

Positive Variables  x4,x7,x8,x9,x10,x11,x12,x13,x14,x16,x17,x18,x19;

Equations  e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15,e16,e17,e18,e19;
Positive Variable  S1 matches x1;
Positive Variable  S2 matches x2;
Positive Variable  S3 matches x3;
Positive Variable  S4 matches x4;
Positive Variable  S5 matches x5;
Positive Variable  S6 matches x6;
Positive Variable  S7 matches x7;
Positive Variable  S8 matches x8;
Positive Variable  S9 matches x9;
Positive Variable  S10 matches x10;
Positive Variable  S11 matches x11;
Positive Variable  S12 matches x12;
Positive Variable  S13 matches x13;
Positive Variable  S14 matches x14;
Positive Variable  S16 matches x16;
Positive Variable  S17 matches x17;
Positive Variable  S18 matches x18;
Positive Variable  S19 matches x19;

Scalars S    level value of function at current point
        SLO  min level for S   / 0 /
        SUP  min level for S   / +inf /
        muS  single bounded MU / 0.0 /
        muD  double bounded MU / 0.0 /;

* MUs will be reset just before the solve


e1..  - (0.425531914893617*x15/(0.425531914893617*x1**(-0.2) + 
     0.212765957446809*x2**(-0.2) + 0.340425531914894*x3**(-0.2) + 
     0.0212765957446809*x5**(-0.2))*(1/x1)**1.2 + 0.0666666666666667*x16/(
     0.0666666666666667*x1**(-0.6) + 0.666666666666667*x2**(-0.6) + 
     0.166666666666667*x3**(-0.6) + 0.1*x6**(-0.6))*(1/x1)**1.6 + 
     0.333333333333333*x17/(0.333333333333333*x1**0.2 + 0.333333333333333*x2**
     0.2 + 0.25*x3**0.2 + 0.0833333333333333*x5**0.2)*(1/x1)**0.8 + 
     0.340136054421769*x18/(0.340136054421769*x1**0.5 + 0.340136054421769*x2**
     0.5 + 0.306122448979592*x3**0.5 + 0.0136054421768708*x6**0.5)*(1/x1)**0.5
      + 0.326086956521739*x19/(0.326086956521739*x1**0.4 + 0.434782608695652*x2
     **0.4 + 0.217391304347826*x3**0.4 + 0.0217391304347826*x6**0.4)*(1/x1)**
     0.6) + 4*x7 + 4*x8 + 1.6*x9 + 1.6*x10 + 1.6*x11 + 0.9*x12 + 7*x13 + 8*x14
      =E= 0 + S1;

e2..  - (0.212765957446809*x15/(0.425531914893617*x1**(-0.2) + 
     0.212765957446809*x2**(-0.2) + 0.340425531914894*x3**(-0.2) + 
     0.0212765957446809*x5**(-0.2))*(1/x2)**1.2 + 0.666666666666667*x16/(
     0.0666666666666667*x1**(-0.6) + 0.666666666666667*x2**(-0.6) + 
     0.166666666666667*x3**(-0.6) + 0.1*x6**(-0.6))*(1/x2)**1.6 + 
     0.333333333333333*x17/(0.333333333333333*x1**0.2 + 0.333333333333333*x2**
     0.2 + 0.25*x3**0.2 + 0.0833333333333333*x5**0.2)*(1/x2)**0.8 + 
     0.340136054421769*x18/(0.340136054421769*x1**0.5 + 0.340136054421769*x2**
     0.5 + 0.306122448979592*x3**0.5 + 0.0136054421768708*x6**0.5)*(1/x2)**0.5
      + 0.434782608695652*x19/(0.326086956521739*x1**0.4 + 0.434782608695652*x2
     **0.4 + 0.217391304347826*x3**0.4 + 0.0217391304347826*x6**0.4)*(1/x2)**
     0.6) + 6*x9 + 8*x10 + 7*x11 =E= 0 + S2;

e3..  - (0.340425531914894*x15/(0.425531914893617*x1**(-0.2) + 
     0.212765957446809*x2**(-0.2) + 0.340425531914894*x3**(-0.2) + 
     0.0212765957446809*x5**(-0.2))*(1/x3)**1.2 + 0.166666666666667*x16/(
     0.0666666666666667*x1**(-0.6) + 0.666666666666667*x2**(-0.6) + 
     0.166666666666667*x3**(-0.6) + 0.1*x6**(-0.6))*(1/x3)**1.6 + 0.25*x17/(
     0.333333333333333*x1**0.2 + 0.333333333333333*x2**0.2 + 0.25*x3**0.2 + 
     0.0833333333333333*x5**0.2)*(1/x3)**0.8 + 0.306122448979592*x18/(
     0.340136054421769*x1**0.5 + 0.340136054421769*x2**0.5 + 0.306122448979592*
     x3**0.5 + 0.0136054421768708*x6**0.5)*(1/x3)**0.5 + 0.217391304347826*x19/
     (0.326086956521739*x1**0.4 + 0.434782608695652*x2**0.4 + 0.217391304347826
     *x3**0.4 + 0.0217391304347826*x6**0.4)*(1/x3)**0.6) + 4*x7 + 3.5*x8
      =E= -7.5 + S3;

e4..  - 5.3*x7 - 5*x8 - 2*x9 - 2*x10 - 2*x11 - x12 - 4*x13 - 5*x14
      =E= -12.1 + S4;

e5..  - (0.0212765957446809*x15/(0.425531914893617*x1**(-0.2) + 
     0.212765957446809*x2**(-0.2) + 0.340425531914894*x3**(-0.2) + 
     0.0212765957446809*x5**(-0.2))*(1/x5)**1.2 + 0.0833333333333333*x17/(
     0.333333333333333*x1**0.2 + 0.333333333333333*x2**0.2 + 0.25*x3**0.2 + 
     0.0833333333333333*x5**0.2)*(1/x5)**0.8) - 2*x7 - x8 - 2*x9 - 4*x10 - x11
      - 3*x13 - 2*x14 =E= -11.3 + S5;

e6..  - (0.1*x16/(0.0666666666666667*x1**(-0.6) + 0.666666666666667*x2**(-0.6)
      + 0.166666666666667*x3**(-0.6) + 0.1*x6**(-0.6))*(1/x6)**1.6 + 
     0.0136054421768708*x18/(0.340136054421769*x1**0.5 + 0.340136054421769*x2**
     0.5 + 0.306122448979592*x3**0.5 + 0.0136054421768708*x6**0.5)*(1/x6)**0.5
      + 0.0217391304347826*x19/(0.326086956521739*x1**0.4 + 0.434782608695652*
     x2**0.4 + 0.217391304347826*x3**0.4 + 0.0217391304347826*x6**0.4)*(1/x6)**
     0.6) - x7 - 6*x8 - 3*x9 - x10 - 8*x11 - x13 - 8*x14 =E= -15.7 + S6;

e7..  - 4*x1 - 4*x3 + 5.3*x4 + 2*x5 + x6 =E= 0 + S7;

e8..  - 4*x1 - 3.5*x3 + 5*x4 + x5 + 6*x6 =E= 0 + S8;

e9..  - 1.6*x1 - 6*x2 + 2*x4 + 2*x5 + 3*x6 =E= 0 + S9;

e10..  - 1.6*x1 - 8*x2 + 2*x4 + 4*x5 + x6 =E= 0 + S10;

e11..  - 1.6*x1 - 7*x2 + 2*x4 + x5 + 8*x6 =E= 0 + S11;

e12..  - 0.9*x1 + x4 =E= 0 + S12;

e13..  - 7*x1 + 4*x4 + 3*x5 + x6 =E= 0 + S13;

e14..  - 8*x1 + 5*x4 + 2*x5 + 8*x6 =E= 0 + S14;

e15..  - x3 - 3*x4 - 5*x5 - 0.1*x6 + x15 =N= 0;

e16..  - 2*x3 - 0.1*x4 - 0.1*x5 - 7*x6 + x16 =E= 0 + S16;

e17..  - 1.5*x3 - 2*x4 - 6*x5 - 0.1*x6 + x17 =E= 0 + S17;

e18..  - x3 - x4 - 0.1*x5 - 8*x6 + x18 =E= 0 + S18;

e19..  - 2*x3 - 6*x4 - 0.1*x5 - 0.5*x6 + x19 =E= 0 + S19;

Equation CS1 matches x1;
   CS1.. S1*(x1 - 1E-5) =E= muS ;
Equation CS2 matches x2;
   CS2.. S2*(x2 - 1E-5) =E= muS ;
Equation CS3 matches x3;
   CS3.. S3*(x3 - 1E-5) =E= muS ;
Equation CS4 matches x4;
   CS4.. S4*(x4 - 0) =E= muS ;
Equation CS5 matches x5;
   CS5.. S5*(x5 - 1E-5) =E= muS ;
Equation CS6 matches x6;
   CS6.. S6*(x6 - 1E-5) =E= muS ;
Equation CS7 matches x7;
   CS7.. S7*(x7 - 0) =E= muS ;
Equation CS8 matches x8;
   CS8.. S8*(x8 - 0) =E= muS ;
Equation CS9 matches x9;
   CS9.. S9*(x9 - 0) =E= muS ;
Equation CS10 matches x10;
   CS10.. S10*(x10 - 0) =E= muS ;
Equation CS11 matches x11;
   CS11.. S11*(x11 - 0) =E= muS ;
Equation CS12 matches x12;
   CS12.. S12*(x12 - 0) =E= muS ;
Equation CS13 matches x13;
   CS13.. S13*(x13 - 0) =E= muS ;
Equation CS14 matches x14;
   CS14.. S14*(x14 - 0) =E= muS ;
Equation CS16 matches x16;
   CS16.. S16*(x16 - 0) =E= muS ;
Equation CS17 matches x17;
   CS17.. S17*(x17 - 0) =E= muS ;
Equation CS18 matches x18;
   CS18.. S18*(x18 - 0) =E= muS ;
Equation CS19 matches x19;
   CS19.. S19*(x19 - 0) =E= muS ;

Variable NOBJ  new objective variable;
Equation COBJ  new objective equation;

COBJ.. NOBJ =E= 0;

* set non default bounds

x1.lo = 1E-5; 
x2.lo = 1E-5; 
x3.lo = 1E-5; 
x5.lo = 1E-5; 
x6.lo = 1E-5; 
x15.fx = 9.1; 

* touch all variables

x1.l = 1; 
x2.l = 1; 
x3.l = 1; 
x4.l = 1; 
x5.l = 1; 
x6.l = 1; 
x7.l = 1; 
x8.l = 1; 
x9.l = 1; 
x10.l = 1; 
x11.l = 1; 
x12.l = 1; 
x13.l = 1; 
x14.l = 1; 
x15.l = 9.1; 
x16.l = 9.2; 
x17.l = 9.6; 
x18.l = 10.1; 
x19.l = 8.6; 

S =  - (0.425531914893617*x15.l/(0.425531914893617*x1.l**(-0.2) + 
   0.212765957446809*x2.l**(-0.2) + 0.340425531914894*x3.l**(-0.2) + 
   0.0212765957446809*x5.l**(-0.2))*(1/x1.l)**1.2 + 0.0666666666666667*x16.l/(
   0.0666666666666667*x1.l**(-0.6) + 0.666666666666667*x2.l**(-0.6) + 
   0.166666666666667*x3.l**(-0.6) + 0.1*x6.l**(-0.6))*(1/x1.l)**1.6 + 
   0.333333333333333*x17.l/(0.333333333333333*x1.l**0.2 + 0.333333333333333*
   x2.l**0.2 + 0.25*x3.l**0.2 + 0.0833333333333333*x5.l**0.2)*(1/x1.l)**0.8 + 
   0.340136054421769*x18.l/(0.340136054421769*x1.l**0.5 + 0.340136054421769*
   x2.l**0.5 + 0.306122448979592*x3.l**0.5 + 0.0136054421768708*x6.l**0.5)*(1/
   x1.l)**0.5 + 0.326086956521739*x19.l/(0.326086956521739*x1.l**0.4 + 
   0.434782608695652*x2.l**0.4 + 0.217391304347826*x3.l**0.4 + 
   0.0217391304347826*x6.l**0.4)*(1/x1.l)**0.6) + 4*x7.l + 4*x8.l + 1.6*x9.l
    + 1.6*x10.l + 1.6*x11.l + 0.9*x12.l + 7*x13.l + 8*x14.l;
S1.L = max(SLO,S);
S =  - (0.212765957446809*x15.l/(0.425531914893617*x1.l**(-0.2) + 
   0.212765957446809*x2.l**(-0.2) + 0.340425531914894*x3.l**(-0.2) + 
   0.0212765957446809*x5.l**(-0.2))*(1/x2.l)**1.2 + 0.666666666666667*x16.l/(
   0.0666666666666667*x1.l**(-0.6) + 0.666666666666667*x2.l**(-0.6) + 
   0.166666666666667*x3.l**(-0.6) + 0.1*x6.l**(-0.6))*(1/x2.l)**1.6 + 
   0.333333333333333*x17.l/(0.333333333333333*x1.l**0.2 + 0.333333333333333*
   x2.l**0.2 + 0.25*x3.l**0.2 + 0.0833333333333333*x5.l**0.2)*(1/x2.l)**0.8 + 
   0.340136054421769*x18.l/(0.340136054421769*x1.l**0.5 + 0.340136054421769*
   x2.l**0.5 + 0.306122448979592*x3.l**0.5 + 0.0136054421768708*x6.l**0.5)*(1/
   x2.l)**0.5 + 0.434782608695652*x19.l/(0.326086956521739*x1.l**0.4 + 
   0.434782608695652*x2.l**0.4 + 0.217391304347826*x3.l**0.4 + 
   0.0217391304347826*x6.l**0.4)*(1/x2.l)**0.6) + 6*x9.l + 8*x10.l + 7*x11.l;
S2.L = max(SLO,S);
S =  - (0.340425531914894*x15.l/(0.425531914893617*x1.l**(-0.2) + 
   0.212765957446809*x2.l**(-0.2) + 0.340425531914894*x3.l**(-0.2) + 
   0.0212765957446809*x5.l**(-0.2))*(1/x3.l)**1.2 + 0.166666666666667*x16.l/(
   0.0666666666666667*x1.l**(-0.6) + 0.666666666666667*x2.l**(-0.6) + 
   0.166666666666667*x3.l**(-0.6) + 0.1*x6.l**(-0.6))*(1/x3.l)**1.6 + 0.25*
   x17.l/(0.333333333333333*x1.l**0.2 + 0.333333333333333*x2.l**0.2 + 0.25*x3.l
   **0.2 + 0.0833333333333333*x5.l**0.2)*(1/x3.l)**0.8 + 0.306122448979592*
   x18.l/(0.340136054421769*x1.l**0.5 + 0.340136054421769*x2.l**0.5 + 
   0.306122448979592*x3.l**0.5 + 0.0136054421768708*x6.l**0.5)*(1/x3.l)**0.5 + 
   0.217391304347826*x19.l/(0.326086956521739*x1.l**0.4 + 0.434782608695652*
   x2.l**0.4 + 0.217391304347826*x3.l**0.4 + 0.0217391304347826*x6.l**0.4)*(1/
   x3.l)**0.6) + 4*x7.l + 3.5*x8.l + 7.5;
S3.L = max(SLO,S);
S =  - 5.3*x7.l - 5*x8.l - 2*x9.l - 2*x10.l - 2*x11.l - x12.l - 4*x13.l
    - 5*x14.l + 12.1;
S4.L = max(SLO,S);
S =  - (0.0212765957446809*x15.l/(0.425531914893617*x1.l**(-0.2) + 
   0.212765957446809*x2.l**(-0.2) + 0.340425531914894*x3.l**(-0.2) + 
   0.0212765957446809*x5.l**(-0.2))*(1/x5.l)**1.2 + 0.0833333333333333*x17.l/(
   0.333333333333333*x1.l**0.2 + 0.333333333333333*x2.l**0.2 + 0.25*x3.l**0.2
    + 0.0833333333333333*x5.l**0.2)*(1/x5.l)**0.8) - 2*x7.l - x8.l - 2*x9.l
    - 4*x10.l - x11.l - 3*x13.l - 2*x14.l + 11.3;
S5.L = max(SLO,S);
S =  - (0.1*x16.l/(0.0666666666666667*x1.l**(-0.6) + 0.666666666666667*x2.l**(-
   0.6) + 0.166666666666667*x3.l**(-0.6) + 0.1*x6.l**(-0.6))*(1/x6.l)**1.6 + 
   0.0136054421768708*x18.l/(0.340136054421769*x1.l**0.5 + 0.340136054421769*
   x2.l**0.5 + 0.306122448979592*x3.l**0.5 + 0.0136054421768708*x6.l**0.5)*(1/
   x6.l)**0.5 + 0.0217391304347826*x19.l/(0.326086956521739*x1.l**0.4 + 
   0.434782608695652*x2.l**0.4 + 0.217391304347826*x3.l**0.4 + 
   0.0217391304347826*x6.l**0.4)*(1/x6.l)**0.6) - x7.l - 6*x8.l - 3*x9.l
    - x10.l - 8*x11.l - x13.l - 8*x14.l + 15.7;
S6.L = max(SLO,S);
S =  - 4*x1.l - 4*x3.l + 5.3*x4.l + 2*x5.l + x6.l;
S7.L = max(SLO,S);
S =  - 4*x1.l - 3.5*x3.l + 5*x4.l + x5.l + 6*x6.l;
S8.L = max(SLO,S);
S =  - 1.6*x1.l - 6*x2.l + 2*x4.l + 2*x5.l + 3*x6.l;
S9.L = max(SLO,S);
S =  - 1.6*x1.l - 8*x2.l + 2*x4.l + 4*x5.l + x6.l;
S10.L = max(SLO,S);
S =  - 1.6*x1.l - 7*x2.l + 2*x4.l + x5.l + 8*x6.l;
S11.L = max(SLO,S);
S =  - 0.9*x1.l + x4.l;
S12.L = max(SLO,S);
S =  - 7*x1.l + 4*x4.l + 3*x5.l + x6.l;
S13.L = max(SLO,S);
S =  - 8*x1.l + 5*x4.l + 2*x5.l + 8*x6.l;
S14.L = max(SLO,S);
S =  - 2*x3.l - 0.1*x4.l - 0.1*x5.l - 7*x6.l + x16.l;
S16.L = max(SLO,S);
S =  - 1.5*x3.l - 2*x4.l - 6*x5.l - 0.1*x6.l + x17.l;
S17.L = max(SLO,S);
S =  - x3.l - x4.l - 0.1*x5.l - 8*x6.l + x18.l;
S18.L = max(SLO,S);
S =  - 2*x3.l - 6*x4.l - 0.1*x5.l - 0.5*x6.l + x19.l;
S19.L = max(SLO,S);

* set non default marginals


Model m / all /;

m.limrow=0; m.limcol=0;

m.optfile    = 0;

option DNLP=OQNLP;

muS = 0;
muD = 0;

Solve m using DNLP minimizing NOBJ;
